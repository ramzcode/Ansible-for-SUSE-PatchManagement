---
- name: "Scan for Updates"
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    - name: "Check if Updates available"
      shell: |
        zypper refresh && zypper lu
      register: reg_update_check

    - name: "list update packages"
      shell: |
        zypper -x lu
        #zypper lu | sed -ne '/Reading installed packages.../,$ p' | sed '1,3d' | awk -F '|' '{ print $3, $4, $5, $6 }'
      register: list_package
      when: reg_update_check is not regex("No updates found")
    
        #    ##Need "xmltodict" pip install xmltodict
        #    - name: "debug"
        #      debug:
        #        msg: "{{list_package.stdout | ansible.utils.from_xml}}"

    - name: Create_JSON for packages
      set_fact:
        list_pkg: "{{list_package.stdout | ansible.utils.from_xml | replace('-','_') | replace('@','')}}"

          #    - name: "debug"
          #      debug:
          #        msg: "{{list_pkg.stream.update_status.update_list | json_query('update[*].name')}}"

    - name: Create_FinalJSON
      set_fact:
        package_jsonlist: "{{list_pkg.stream.update_status.update_list}}"

    - name: "set available Pkg var"
      set_fact:
        available_pkg:
          available_pkg_count: "{{ package_jsonlist | json_query('update[*].name') | list | length | int }}"

    - name: "debug"
      debug:
        msg: "{{available_pkg}}"

    - name: "list update patches"
      shell: |
        zypper -x lp --with-optional
        #zypper lp --with-optional | sed -ne '/Reading installed packages.../,$ p' | sed '/^$/d' | sed '1,4d' | sed -e '/The following updates are also available:/,+2d' | sed -e '/^Found/,$d' | awk -F '|' '{ print $2, $3, $4, $8}'
      register: list_patch
      when: reg_update_check is not regex("No updates found")

    - name: Create_JSON for patches
      set_fact:
        list_patches: "{{list_patch.stdout | ansible.utils.from_xml | replace('-','_') | replace('@','')}}"

    - name: Create_FinalJSON_PatchList
      set_fact:
        patch_jsonlist: "{{list_patches.stream.update_status}}"

    - name: Create the JSON fill for conversion
      copy:
        content: "{{list_patches.stream.update_status}}"
        dest: /tmp/JSONdatafromansible

    - name: "Restructure the JSON"
      shell: python3 /root/SUSE/JSON-converter-NEW.py

    - name: "set available Patch var"
      set_fact:
        available_patch:
          #available_pkgpatch_count: "{{ patch_jsonlist.blocked_update_list | json_query('update[*].name') | list | length | int }}"
          #available_pkgmgrpatch_count: "{{ patch_jsonlist.update_list | json_query('update[*].name') | list | length | int }}"
          available_total_patch_count: "{{ (patch_jsonlist.blocked_update_list | json_query('update[*].name') | list | length | int) + (patch_jsonlist.update_list | json_query('update[*].name') | list | length | int) }}"

    - name: "debug"
      debug:
        msg: "{{available_patch}}"

    - name: "debug"
      debug:
        msg:
          - "{{patch_jsonlist.blocked_update_list | json_query('update[*].name') | replace('_','-')}}"
          - "{{patch_jsonlist.update_list | json_query('update[*].name') | replace('_','-')}}"

    - name: "Test for Advisory finder"
      shell: echo {{item.0}},{{item.1}} >> /tmp/temp-update_version.csv
      with_together:
        - "{{ package_jsonlist | json_query('update[*].name') | replace('_','-')}}"
        - "{{ package_jsonlist | json_query('update[*].edition') | replace('_','-')}}"
      delegate_to: localhost

    - name: "Write PL name to file"
      shell: "echo {{item.0}} >> /tmp/temp-patchlist.txt && echo {{item.1}} >> /tmp/temp-patchlist.txt && cat /tmp/temp-patchlist.txt | grep -Ev '^$' >> /tmp/temp-finalpatchlist.txt "
      with_together:
        - "{{patch_jsonlist.blocked_update_list | json_query('update[*].name') | replace('_','-')}}"
        - "{{patch_jsonlist.update_list | json_query('update[*].name') | replace('_','-')}}"
      delegate_to: localhost

        #   - name: "Filter the package from info list"
        #     shell: cat /tmp/temp-finalpatchlist.txt | grep -E '^\s*firewalld < 0.9.3-150400.8.9.1$'
          #
          #    - name: "debug"
          #      debug:
          #        msg: "{{list_patch.stdout | ansible.utils.from_xml}}"
...
